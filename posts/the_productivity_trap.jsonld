{
  "@context": "https://schema.org",
  "@type": "BlogPosting",
  "headline": "the productivity trap",
  "datePublished": "2025-06-04",
  "author": {
    "@type": "Person",
    "name": "mei happs"
  },
  "publisher": {
    "@type": "Person",
    "name": "mei happs"
  },
  "url": "https://meihapps.gay/blog/the_productivity_trap",
  "encodingFormat": "text/markdown",
  "articleBody": "for the first time in a while, i encountered [an argument for artificial intelligence use in programming](https://fly.io/blog/youre-all-nuts) that i couldn't refute from my past experiences alone: ai agents kept under tight supervision.\n\nso of course i have to give the technique a try, because i value my opinions being grounded in reality. if i want to have a stance on this, i need to be able to view it from this perspective first.\n\nso of course, my first port of call was to see what i had accessible to me. the article mentioned [zed's](https://zed.dev) agent mode as one they particularly liked, and luckily for me there's a free tier.\n\ni threw it at a codebase i'd already started on that was having some issues because the framework i was using is very poorly documented, with most of the information i can find on their official docs and the rest of the internet being out of date and no longer true. i told it to fix the broken code.\n\nnaturally, it immediately started programming exactly the way i tried before, with the technique in the docs that doesn't work at all. but! it immediately realised it wasn't working and started looking into alternative approaches and in seconds it had scrounged up some arcane approach from some dark recess of the internet that i couldn't find after hours of searching. i'll admit, i was impressed. speaking purely objectively, it just outdid me. now, as the article says, i leave it for a while. checking back on my computer every so often until it decides it's done.\n\nwhen it's finally done, i go through the log of every decision it's made in that time. i know the article doesn't want me doing that, but i don't want to just see the code it produces, i want to know it's process. there were several new things i was impressed about. as the article says, it regularly hallucinates and that's to be expected. but every time, without fail, it:\n\n- runs diagnostics\n- spots an error\n- fixes the error\n\nand at this point im actually quite pleased with the results (not that they're done!). however, i haven't checked the actual code yet.\n\nso i do check the code, and overall it's very boiler-plate. not at all how i would write it. it's not very concise at all but, the code is mostly fine even if it doesn't live up to my (quite high) standards. i could go through manually editing this code to be more in line with my preferences, but i would prefer to take this opportunity to see how good it is at fixing its own mistakes with a sensible prompt.\n\ni'd tell it something like \"line 116 should use a guard\" and it would take it's shitty little if-else and fix it first try. or \"lines 212-216 should take a functional approach\" and it'll take it's silly overly-verbose for loop and make it into a nice, clean map. now i'm really impressed because i can write code in my style at lightning speed with minimal effort. i finish going through all the code that was there, tweaking it and improving it and by the time i get to the end, it's actually looking pretty good. i've never been this productive in my life, and i don't feel the least bit drained by the process\n\nnow i go to commit the changes, and i tell it to split the changes into reasonable commits because i am not as attentive as i should be to my git commits. and i am impressed again, because it used the message backlog to revert the code, commit, apply more changes, commit, etc. until there were 5 commits, all of which were functioning sensible changes. this is something i've done manually a few too many times (again, bad at committing. feel free to incriminate me for it, it's deserved), but it did it so fast.\n\nand this is where things start to go downhill for me, because i ran out of requests for the month. on june 2nd. and this is not a month of work. so like a crazed addict i started hunting for some other way to get my token fix, when i discovered that co-pilot pro is just part of my student benefits. so of course i get it set up and continue from where i left off. i start implementing a new feature and co-pilot pulls through. the feature is made. that did happen. but it took so, so long and it was such a simple feature. i could have probably done it in 5-10 minutes, but co-pilot was bouncing from error to error for over an hour. it started messing with random parts of the codebase. half the time it wasn't even in the right file. in the end i shut it off, reverted everything and did the feature myself in 5-10 minutes.\n\nnext i figured i'd ask it to make some good commits for me. it responded happily, and told me it'd get on that right after adding some comments to the code. it then added such an unfathomable amount of stupidly pointless comments to my code. things like \"loads file content\" on a function named \"load_file_content\". you get the idea. so i stopped it, reverted these quite frankly abysmal comments and tried again, this time making sure to tell it not to change the code in any way. and it said something incredibly surprising! \"in this environment, i don't have direct access to create git commits. i can guide you through how to make these commits manually with the changes we've made\". this comes as a huge surprise to me, because i'm fairly certain it literally did that earlier? so i ask it \"could i grant you access to creating git commits\" and naturally it tells me no, because it only has access to \"reading, writing, and executing commands within the current application directory\". now, i don't know if anyone here is a particular expert on git, it may be considered quite esoteric especially for knowledge of this level, but git is actually a command! and when i pointed this out to co-pilot it said \"you're right - i should be able to execute git commands\" and then it tried it and it worked. this is absolutely insane to me, i just had to prove to it that it had a capability that it had already displayed while it desperately tried to gaslight me that it was worse than it is??\n\nand at this point, i hit my co-pilot rate limit. still june 2nd. this was a huge surprise, because co-pilot had not at any point made me aware that one exists. at several points it assured me that it was unlimited so i did some research, and apparently they've had this hidden rate-limit for a while now, even for paying customers.\n\nso i decided to work on it manually, but what was previously an acceptable pace to me now feels unbearably slow. i'm rapidly becoming reliant on it, and i can't help but wonder, when it does fail me, will i still have the skills to keep programming the way i used to, or will i be out of practice? what i have access to now is free, but if i want to get more, or when i stop being a student, i'm going to have to start paying. and are these price plans viable? or are businesses offering these plans going to have to start pumping the prices the moment the ai bubble pops and their venture capital budget dies.\n\ni'm not going to deny that for this one day, my productivity was at the highest it has ever been by a huge margin. but i don't see a world where this technology becomes efficient enough to sustain itself before people stop pumping money into it to keep it afloat. when that happens, i don't want to be told that my job is on the line if i don't keep paying a continually growing subscription fee. as has been the case in every sector from its inception, artificial intelligence is not for the benefit of the workers.\n\nnow i will say, if my efficiency concerns are solved before the bubble is popped, and companies decide they will pay for their workers to have access to this technology as a job benefit, and also the subscriptions would be affordable to hobbyists so that they can stand on a level playing field, then i wouldn't have any arguments left for now. but that sounds like a pipe dream."
}
